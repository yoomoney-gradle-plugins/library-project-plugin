/**
 *  Скрипт проверяет исходный код модуля в соответствии с правилами findbugs
 *
 *  ext.findbugsExcludeFilter - путь до файла с исключениями.
 *  Если он не задан, то скачивается файл по умолчанию.
 *
 *  ext.findbugsEffort - сложность запускаемых проверок.
 *  По умолчанию default.
 *
 *  ext.findbugsReportLevel - какие предупреждения включать в отчет.
 *  По умолчанию medium.
 *
 *  ext.findbugsToolVersion - версия findbugs.
 *  По умолчанию 3.0.0.
 *
 *  ext.findbugsEnabled - включение findbugs.
 *  По умолчанию включено.
 *
 *  Usage:
 *
 *
 *    apply from: 'findbugs.gradle'
 *
 */

import static java.lang.Math.max

apply plugin: 'findbugs'
apply plugin: 'java'
dependencies {
    findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.0.5',
            'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}


class DownloadFindbugsFileTask extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        new URL(sourceUrl).withInputStream { i -> target.withOutputStream { it << i } }
    }
}

def findbugsDefaultExcludeFilterPath = "$buildDir/tmp/findbugs-exclude.xml"

ext {

    if (!project.hasProperty("findbugsEnabled")) {
        findbugsEnabled = true
    }

    if (!project.hasProperty("findbugsUseDefaultExcludeFilter")) {
        findbugsUseDefaultExcludeFilter = false
    }

    if (!project.hasProperty("findbugsEffort")) {
        findbugsEffort = 'default'
    }
    if (!project.hasProperty("findbugsReportLevel")) {
        findbugsReportLevel = 'medium'
    }
    if (!project.hasProperty("findbugsExcludeFilter")) {
        findbugsUseDefaultExcludeFilter = true
        findbugsExcludeFilter = findbugsDefaultExcludeFilterPath
    }
    if (!project.hasProperty("findbugsToolVersion")) {
        findbugsToolVersion = "3.0.1"
    }
}

task downloadFindbugsExcludeFilter(type: DownloadFindbugsFileTask) {
    sourceUrl = 'http://jenkins-dev.yamoney.ru/build-scripts/backend-platform/configs/findbugs-exclude.xml'
    target = file(findbugsDefaultExcludeFilterPath)
}

findbugs {
    toolVersion = project.findbugsToolVersion
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/findbugsReports")
    effort = project.findbugsEffort
    reportLevel = project.findbugsReportLevel
    excludeFilter = file(project.findbugsExcludeFilter)
    ignoreFailures = true
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = false
    }

}

tasks.findAll { task -> task.name.equals('downloadFindbugsExcludeFilter') }*.onlyIf { project.findbugsUseDefaultExcludeFilter }
tasks.findAll { task -> task.name.contains('findbugs') }*.onlyIf { project.findbugsEnabled }

tasks.withType(FindBugs) {
    it.dependsOn downloadFindbugsExcludeFilter
}

build.dependsOn findbugsMain

task checkFindBugsReport {
    doLast {

        if (!project.findbugsEnabled) {
            logger.lifecycle("Findbugs disabled. For $project")
            return
        }

        def limit = getStaticAnalysisLimit("findbugs").orElse(0)

        def xmlReport = findbugsMain.reports.xml

        //если в проекте нет исходноков, то отчет создан не будет. Пропускает такие проекты
        if (!xmlReport.destination.exists()) {
            logger.lifecycle("Findbugs report not found: $xmlReport.destination. Findbugs skipped.")
            return
        }

        def slurped = new XmlSlurper().parse(xmlReport.destination)
        def bugsFound = slurped.BugInstance.size()

        if (bugsFound > limit) {
            throw new GradleException("Too much FindBug errors: actual=$bugsFound, limit=$limit. See the report at: $xmlReport.destination")
        } else if (bugsFound < max(0, limit - 10)) {
            throw new GradleException("FindBug limit is too high, must be $bugsFound. Decrease it in file static-analysis.properties.")
        } else {
            logger.lifecycle("FindBug successfully passed with $bugsFound (limit=$limit) errors. See the report at: $xmlReport.destination")
        }
    }
}

findbugsMain.finalizedBy checkFindBugsReport
