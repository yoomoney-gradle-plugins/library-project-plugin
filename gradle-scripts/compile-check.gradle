/**
 *  Скрипт проверяет, что кол-во предупреждений при компиляции не превышает лимит 
 *
 *  Лимит должен быть задан в файле static-analysis.properties
 *  Название настройки лимита - compiler
 *
 *  Usage:
 *
 *    apply from: 'compile-check.gradle'
 *
 */

def getCompilerLowerLimit = { int limit ->
    return limit * 95 / 100
}

def addWarningCheck = {
    java.util.Optional<Integer> limitOpt = getStaticAnalysisLimit("compiler")
    if (!limitOpt.isPresent()) {
        logger.warn('No settings for compiler warnings check. Skipping.')
        return
    }
    if (!(ext.isHotfixBranch || ext.isFeatureBranch)) {
        logger.warn('Compiler warnings check is enabled on feature/ and hotfix/ branches. Skipping.')
        return
    }

    def limit = limitOpt.get().intValue()

    def compileJavaTask = tasks.findByName("compileJava")
    compileJavaTask.options.deprecation = false
    compileJavaTask.options.compilerArgs << "-Xlint:unchecked" << "-Xmaxwarns" << "10000"
    def outputEvents = []
    def listener = new StandardOutputListener() {
        void onOutput(CharSequence event) {
            outputEvents << event
        }
    }

    compileJavaTask.doFirst {
        getLogging().addStandardErrorListener(listener)
    }
    compileJavaTask.doLast {
        getLogging().removeStandardErrorListener(listener)

        def warnCount = outputEvents.stream().filter {
            (it =~ " warning: ").find()
        }.count()

        if (warnCount > limit) {
            throw new GradleException("Too much compiler warnings: actual=$warnCount, limit=$limit")
        } else if (warnCount < getCompilerLowerLimit(limit)) {
            throw new GradleException("Compiler warnings limit is too high, must be $warnCount. Decrease it in file static-analysis.properties.")
        } else {
            logger.lifecycle("Compiler warnings check successfully passed with $warnCount warnings")
        }
    }
}
addWarningCheck()
