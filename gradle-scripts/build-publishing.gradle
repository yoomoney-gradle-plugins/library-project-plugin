apply plugin: 'maven-publish'
apply plugin: 'java'

javadoc {
    classpath += project.configurations.optional
    options {
        docEncoding = 'UTF-8'
        charSet = 'UTF-8'
        encoding = 'UTF-8'
        failOnError = false
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def getPublishingComponent() {
    if (!project.hasProperty("publishingComponent")) {
        return components.java
    }
    return project.publishingComponent
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId "ru.yandex.money" + (groupIdSuffix == "" ? "" : ".${groupIdSuffix}")
            artifactId "${artifactID}"

            from getPublishingComponent()

            pom.withXml {

                // https://discuss.gradle.org/t/maven-publish-plugin-generated-pom-making-dependency-scope-runtime/7496
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }

            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier = 'javadoc'
            }
        }
    }

    repositories {
        maven {
            url project.version.endsWith('-SNAPSHOT') ? project.ext.snapshotRepoProxyUrl : project.ext.releaseRepoProxyUrl
            credentials {
                def nexusUser = System.getenv('NEXUS_USER')
                if (nexusUser == "") {
                    nexusUser = console.readLine('> Enter nexus user name: ')
                }
                def nexusPassword = System.getenv('NEXUS_PASSWORD')
                if (nexusPassword == "") {
                    nexusPassword = console.readLine('> Enter nexus password: ')
                }
                username nexusUser
                password nexusPassword
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) { it.dependsOn test }


/**
 * Сохраняет версию модуля в файл.
 * Данный файл используется для публикации версии компонента на странице сборки компонента в jenkins
 */
task storeVersion {
    description = "Generates file, which contains information about build version"

    def storeVersionToFile = { String versionDir, String filename, String content ->
        try {
            File versionFile = new File(versionDir, filename)
            versionFile.text = content
            logger.lifecycle("File with deb package version generated successfully into ${versionFile.getAbsolutePath()}")
        } catch (Exception e) {
            logger.lifecycle("Error occurred during storing version of deb package: '${e.getMessage()}'. SKIPPED")
        }
    }

    doLast {
        String debVersionDir = buildDir
        String debVersionFilename = "version.txt"
        String debVersion = "$artifactID:$version"

        storeVersionToFile(debVersionDir, debVersionFilename, debVersion)
    }
}
tasks.publish.finalizedBy storeVersion